;;;; SPDX-FileCopyrightText: Atlas Engineer LLC
;;;; SPDX-License-Identifier: BSD-3-Clause

(uiop:define-package :nyxt/dom
  (:use :common-lisp :nyxt)
  (:import-from #:class-star #:define-class)
  (:import-from #:serapeum #:export-always)
  (:documentation "Nyxt-specific DOM classes and functions operating on them."))
(in-package :nyxt/dom)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (trivial-package-local-nicknames:add-package-local-nickname :alex :alexandria)
  (trivial-package-local-nicknames:add-package-local-nickname :sera :serapeum))

;; TODO: Factor out into a library?

(defvar *nyxt-dom-classes* (make-hash-table :test #'equalp)
  "A table associating the HTML tag name (e.g., \"a\") with the corresponding
  nyxt/dom class.")

(defmacro define-element-classes (&body names)
  (loop for name in names
        collect (let* ((class-name (if (listp name) (first name) name))
                       (tag (str:replace-all "-element"  "" (str:downcase (symbol-name class-name))))
                       (additional-superclasses (when (listp name) (rest name))))
                  `(progn
                     (define-class ,class-name (,@(if additional-superclasses
                                                      additional-superclasses
                                                      '(plump:element)))
                       ()
                       (:export-class-name-p t)
                       (:export-accessor-names-p t)
                       (:export-predicate-name-p t)
                       (:accessor-name-transformer (hu.dwim.defclass-star:make-name-transformer name))
                       (:documentation ,(format nil "An autogenerated class for <~a> HTML tag." tag)))
                     (setf (gethash ,tag *nyxt-dom-classes*)
                           (quote ,class-name))))
          into classes
        finally (return `(progn ,@classes))))


(define-element-classes
  ;; All HTML5 tags, including experimental ones. Scraped with:
  ;;
  ;; (format t "~{~a-element~^ ~}"
  ;;         (map 'list #'(lambda (item)
  ;;                        (slot-value (elt (slot-value item 'plump-dom::%children) 0)
  ;;                                    'plump-dom::%text))
  ;;              (clss:select ".item-name" (plump:parse (dex:get "https://htmlreference.io/")))))
  ;;
  ;; TODO: There's h-element pseudo-tag, do we need more pseudo-tags?
  ;; - table-part-element for td, th, tr, thead, tfoot, tbody, table
  ;; - list-part-element for ul, ol, li
  ;; - semantic-element for main, aside, section, footer
  a-element abbr-element address-element area-element article-element aside-element audio-element
  b-element base-element bdi-element bdo-element blockquote-element body-element br-element
  button-element canvas-element caption-element cite-element code-element col-element
  colgroup-element data-element datalist-element dd-element del-element details-element dfn-element
  dialog-element div-element dl-element dt-element em-element embed-element fieldset-element
  figcaption-element figure-element footer-element form-element h-element ; pseudo-tag
  (h1-element h-element) (h2-element h-element) (h3-element h-element) (h4-element h-element)
  (h5-element h-element) (h6-element h-element) head-element header-element hgroup-element
  hr-element html-element i-element iframe-element img-element input-element ins-element kbd-element
  label-element legend-element li-element link-element main-element map-element mark-element
  meta-element meter-element nav-element noframes-element noscript-element object-element
  ol-element optgroup-element option-element output-element p-element param-element picture-element
  pre-element progress-element q-element rp-element rt-element rtc-element ruby-element s-element
  samp-element script-element section-element select-element slot-element small-element
  source-element span-element strong-element style-element sub-element summary-element sup-element
  table-element tbody-element td-element template-element textarea-element tfoot-element th-element
  thead-element time-element title-element tr-element track-element u-element ul-element
  var-element video-element wbr-element)

(defmethod name-dom-elements ((node plump:node))
  (alex:when-let* ((tag-p (plump:element-p node))
                   (class (gethash (plump:tag-name node) *nyxt-dom-classes*)))
    (change-class node class))
  (when (plump:nesting-node-p node)
    (loop for child across (plump:children node)
          do (name-dom-elements child)))
  node)

(export-always 'named-parse)
(defun named-parse (input)
  (name-dom-elements (plump:parse input)))
