;;;; SPDX-FileCopyrightText: Atlas Engineer LLC
;;;; SPDX-License-Identifier: BSD-3-Clause

(uiop:define-package :nyxt/dom
  (:use :common-lisp :nyxt)
  (:import-from #:class-star #:define-class)
  (:import-from #:serapeum #:export-always)
  (:documentation "Nyxt-specific DOM classes and functions operating on them."))
(in-package :nyxt/dom)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (trivial-package-local-nicknames:add-package-local-nickname :alex :alexandria)
  (trivial-package-local-nicknames:add-package-local-nickname :sera :serapeum))

;; TODO: Factor out into a library?

(defvar *nyxt-dom-classes* (make-hash-table :test #'equalp)
  "A table associating the HTML tag name (e.g., \"a\") with the corresponding
  nyxt/dom class.")

(defmacro define-element-classes (&body names)
  (loop for name in names
        collect (let* ((class-name (if (listp name) (first name) name))
                       (tag (str:replace-all "-element"  "" (str:downcase (symbol-name class-name))))
                       (additional-superclasses (when (listp name) (rest name))))
                  `(progn
                     (define-class ,class-name (,@(if additional-superclasses
                                                      additional-superclasses
                                                      '(plump:element)))
                       ()
                       (:export-class-name-p t)
                       (:export-accessor-names-p t)
                       (:export-predicate-name-p t)
                       (:accessor-name-transformer (hu.dwim.defclass-star:make-name-transformer name))
                       (:documentation ,(format nil "An autogenerated class for <~a> HTML tag." tag)))
                     (setf (gethash ,tag *nyxt-dom-classes*)
                           (quote ,class-name))))
          into classes
        finally (return `(progn ,@classes))))


(define-element-classes
  ;; All HTML5 tags, including experimental ones. Scraped with:
  ;;
  ;; (format t "~{~a-element~^ ~}"
  ;;         (map 'list #'(lambda (item)
  ;;                        (slot-value (elt (slot-value item 'plump-dom::%children) 0)
  ;;                                    'plump-dom::%text))
  ;;              (clss:select ".item-name" (plump:parse (dex:get "https://htmlreference.io/")))))
  ;; Pseudo-tags:
  text-element (h-element text-element) list-element structure-element semantic-element
  (checkbox-element input-element) (radio-element input-element) (file-chooser-element input-element)
  ;; HTML5 elements:
  (a-element text-element) abbr-element address-element area-element
  (article-element semantic-element) (aside-element semantic-element)
  audio-element (b-element text-element) base-element bdi-element bdo-element
  blockquote-element body-element br-element button-element canvas-element
  caption-element cite-element code-element col-element colgroup-element
  data-element datalist-element (dd-element list-element) (del-element text-element) details-element
  dfn-element div-element (dl-element list-element) (dt-element list-element) em-element
  embed-element fieldset-element (figcaption-element semantic-element) figure-element
  (footer-element semantic-element) form-element (h1-element) (h2-element h-element)
  (h3-element h-element) (h4-element h-element) (h5-element h-element) (h6-element h-element)
  head-element (header-element semantic-element) hr-element html-element (i-element text-element)
  iframe-element img-element input-element ins-element kbd-element label-element legend-element
  (li-element list-element) link-element (main-element semantic-element) map-element
  (mark-element semantic-element) meta-element meter-element (nav-element semantic-element)
  noscript-element object-element (ol-element list-element) optgroup-element
  (option-element text-element) output-element p-element param-element pre-element progress-element
  q-element rp-element rt-element rtc-element ruby-element samp-element script-element
  (section-element semantic-element) select-element small-element source-element span-element
  (strong-element text-element) style-element (sub-element text-element)
  summary-element (sup-element text-element) table-element tbody-element td-element textarea-element
  tfoot-element th-element thead-element (time-element semantic-element) title-element tr-element
  track-element (ul-element list-element) var-element video-element
  ;; obsolete elements (from https://www.w3.org/TR/2010/WD-html5-20100304/obsolete.html):
  applet-element acronym-element bgsound-element dir-element frame-element frameset-element
  noframes-element isindex-element (listing-element text-element) (xmp-element text-element)
  nextid-element noembed-element (plaintext-element text-element) (rb-element ruby-element)
  (basefont-element text-element) (big-element text-element) (blink-element text-element)
  (center-element text-element) (font-element text-element) (marquee-element text-element)
  (multicol-element text-element) (nobr-element text-element) (s-element text-element)
  (spacer-element text-element) (strike-element text-element) (tt-element text-element)
  (u-element text-element)
  ;; Experimental elements:
  dialog-element hgroup-element picture-element slot-element template-element
  (wbr-element text-element))

(defun infer-role-class (node role)
  "Infer NODE class based on WAI-ARIA role.
Based on https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles"
  (str:string-case role
    ("article" 'article-element)
    ("button" 'button-element)
    ("cell" 'td-element)
    ("checkbox" 'checkbox-element)
    ("form" 'form-element)
    ("header" (case (plump:get-attribute node "aria-level")
                (1 'h1-element)
                (2 'h2-element)
                (3 'h3-element)
                (4 'h4-element)
                (5 'h5-element)
                (6 'h6-element)))
    ("list" 'ul-element)
    ("listitem" 'li-element)
    ("mark" 'mark-element)
    ("navigation" 'nav-element)
    ("row" 'tr-element)
    ("switch" 'checkbox-element)
    ("table" 'table-element)
    ("textbox" 'textarea-element)
    (t (gethash (plump:tag-name node) *nyxt-dom-classes*))))

(defun infer-class (node)
  (cond
    ((plump:has-attribute node "role")
     (infer-role-class node (plump:get-attribute node "role")))
    ((clss:node-matches-p "a[type=button]" node) 'button-element)
    ((clss:node-matches-p "input[type=button]" node) 'button-element)
    ((clss:node-matches-p "input[type=checkbox]" node) 'checkbox-element)
    ((clss:node-matches-p "input[type=radio]" node) 'radio-element)
    ((clss:node-matches-p "input[type=file]" node) 'file-chooser-element)
    (t (gethash (plump:tag-name node) *nyxt-dom-classes*))))

(defmethod name-dom-elements ((node plump:node))
  (alex:when-let* ((tag-p (plump:element-p node))
                   (class (infer-class node)))
    (change-class node class))
  (when (plump:nesting-node-p node)
    (loop for child across (plump:children node)
          do (name-dom-elements child)))
  node)

(export-always 'named-parse)
(declaim (ftype (function (string) (values (or plump-dom:root null) &optional)) named-parse))
(defun named-parse (input)
  (name-dom-elements (plump:parse input)))
